1. 0의 이중 표현 문제
가장 큰 문제는 0을 두 가지 방식으로 표현할 수 있다는 점입니다. 예를 들어 4비트 시스템에서:

+0: 0000
-0: 1000

이는 비교 연산과 저장 공간 측면에서 비효율적입니다.
2. 복잡한 산술 연산
덧셈과 뺄셈이 매우 복잡해집니다:

두 수의 부호가 같으면 크기를 더하고 공통 부호를 적용
두 수의 부호가 다르면 크기를 비교해서 더 큰 수에서 작은 수를 빼고, 더 큰 수의 부호를 적용
이로 인해 하드웨어 구현이 복잡해지고 처리 시간이 증가합니다.

3. 표현 범위의 제한
n비트 시스템에서 표현할 수 있는 범위가 비대칭적입니다:

4비트의 경우: -7 ~ +7 (총 15개의 서로 다른 값)
0이 두 번 표현되어 실질적으로 하나의 값을 낭비

4. 비교 연산의 복잡성
두 수를 비교할 때 단순히 비트 패턴만으로는 판단할 수 없고, 부호와 크기를 별도로 고려해야 합니다.
5. 하드웨어 구현의 비효율성

별도의 부호 검사 로직이 필요
산술 연산을 위한 복잡한 제어 회로 필요
처리 속도 저하와 회로 복잡도 증가